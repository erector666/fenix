import React, { useState, useEffect } from 'react';
import { Clock, MapPin, Camera, Play, Pause, Square, Car, Fuel, Users, Calendar, BarChart3, Settings, LogOut } from 'lucide-react';
import { GoogleMap, Marker, useJsApiLoader } from '@react-google-maps/api';

const EmployeeTrackingApp = () => {
  const [currentUser, setCurrentUser] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [currentView, setCurrentView] = useState('login');
  const [workSession, setWorkSession] = useState(null);
  const [location, setLocation] = useState(null);
  const [employees, setEmployees] = useState([
    { id: 1, name: 'Petre Klesov', email: 'petre.klesov@fenix.com', password: 'admin123' },
    { id: 2, name: 'Ilija Klesov', email: 'ilija.klesov@fenix.com', password: 'admin123' },
    { id: 3, name: 'Vojne Manevski', email: 'vojne.manevski@fenix.com', password: 'admin123' },
    { id: 4, name: 'Dragan Srbin', email: 'dragan.srbin@fenix.com', password: 'admin123' },
    { id: 5, name: 'Tino Manevski', email: 'tino.manevski@fenix.com', password: 'admin123' }
  ]);
  const [workLogs, setWorkLogs] = useState([]);
  const [vehicles] = useState([
    { id: 1, name: 'Van #1', plate: 'ABC-123' },
    { id: 2, name: 'Van #2', plate: 'DEF-456' },
    { id: 3, name: 'Truck #1', plate: 'GHI-789' },
    { id: 4, name: 'Personal Car', plate: 'Own Vehicle' }
  ]);
  const [cameraModalOpen, setCameraModalOpen] = useState(false);
  const [cameraStream, setCameraStream] = useState(null);
  const [pendingSessionData, setPendingSessionData] = useState(null);
  const videoRef = React.useRef(null);
  const canvasRef = React.useRef(null);
  const [activeTab, setActiveTab] = useState('overview');
  const [selectedDate, setSelectedDate] = useState(() => new Date().toISOString().slice(0, 10));
  const GOOGLE_MAPS_API_KEY = 'AIzaSyAuDjIik681kmwRz56jEQULsxmTif_tFHI';

  // Login Component
  const LoginForm = () => {
    const [email, setEmail] = useState('');
    const [password, setPassword] = useState('');

    const handleLogin = () => {
      // Check for admin login
      if (email === 'kango@fenix.com' && password === 'admin123') {
        setCurrentUser({ id: 0, name: 'Admin', email: 'kango@fenix.com' });
        setIsAdmin(true);
        setCurrentView('admin');
        return;
      }

      // Check for employee login
      const employee = employees.find(emp => emp.email === email && emp.password === password);
      if (employee) {
        setCurrentUser(employee);
        setIsAdmin(false);
        setCurrentView('employee');
        getCurrentLocation();
      } else {
        alert('Invalid credentials');
      }
    };

    return (
      <div className="min-h-screen bg-gradient-to-br from-orange-500 to-red-600 flex items-center justify-center p-4">
        <div className="bg-white rounded-lg shadow-xl p-8 w-full max-w-md">
          <div className="text-center mb-8">
            <div className="mb-4">
              <img src="/Copilot_20250704_175306.png" alt="FENIX Logo" className="mx-auto max-w-[200px] max-h-[100px] object-contain" />
            </div>
            <h1 className="text-3xl font-bold text-gray-800 mb-2">FENIX</h1>
            <p className="text-gray-600">Construction Tracker</p>
          </div>
          
          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Email</label>
              <input
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                placeholder="Enter your email"
                required
              />
            </div>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Password</label>
              <input
                type="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                placeholder="Enter your password"
                required
              />
            </div>
            
            <button
              onClick={handleLogin}
              className="w-full bg-orange-500 text-white py-2 px-4 rounded-md hover:bg-orange-600 transition duration-200"
            >
              Login
            </button>
          </div>
          
          <div className="mt-6 text-sm text-gray-600 text-center">
            <p>Demo Credentials:</p>
            <p>Admin: kango@fenix.com / admin123</p>
            <p>Worker: petre.klesov@fenix.com / admin123</p>
          </div>
        </div>
      </div>
    );
  };

  // Get current location
  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          setLocation({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
            timestamp: new Date().toISOString()
          });
        },
        (error) => {
          console.error('Error getting location:', error);
          setLocation({ error: 'Location not available' });
        }
      );
    }
  };

  // Employee Dashboard Component
  const EmployeeDashboard = () => {
    const [selectedVehicle, setSelectedVehicle] = useState('');
    const [gasAmount, setGasAmount] = useState('');
    const [screenshot, setScreenshot] = useState(null);
    const [showVehicleModal, setShowVehicleModal] = useState(false);

    // Open camera modal after vehicle selection
    const startWork = () => {
      if (!selectedVehicle) {
        setShowVehicleModal(true);
        return;
      }
      // Get geolocation first
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            const startLocation = {
              latitude: position.coords.latitude,
              longitude: position.coords.longitude,
              timestamp: new Date().toISOString()
            };
            setPendingSessionData({ startLocation });
            setCameraModalOpen(true);
          },
          (error) => {
            const startLocation = { error: 'Location not available' };
            setPendingSessionData({ startLocation });
            setCameraModalOpen(true);
          }
        );
      }
    };

    // Handle camera modal open/close
    useEffect(() => {
      if (cameraModalOpen) {
        // Open camera
        navigator.mediaDevices.getUserMedia({ video: true })
          .then(stream => {
            setCameraStream(stream);
            if (videoRef.current) {
              videoRef.current.srcObject = stream;
            }
          });
      } else {
        // Close camera
        if (cameraStream) {
          cameraStream.getTracks().forEach(track => track.stop());
          setCameraStream(null);
        }
      }
    }, [cameraModalOpen]);

    // Capture photo from video
    const handleCapturePhoto = () => {
      if (videoRef.current && canvasRef.current) {
        const video = videoRef.current;
        const canvas = canvasRef.current;
        canvas.width = video.videoWidth;
        canvas.height = video.videoHeight;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        const dataUrl = canvas.toDataURL('image/png');
        // Save session with photo
        const screenshotData = {
          id: Date.now(),
          timestamp: new Date().toISOString(),
          location: pendingSessionData.startLocation,
          type: 'work_start',
          image: dataUrl
        };
        const session = {
          id: Date.now(),
          employeeId: currentUser.id,
          employeeName: currentUser.name,
          startTime: new Date().toISOString(),
          startLocation: pendingSessionData.startLocation,
          vehicle: vehicles.find(v => v.id === parseInt(selectedVehicle)),
          gasAmount: parseFloat(gasAmount) || 0,
          screenshots: [screenshotData],
          breaks: [],
          status: 'working',
          locationHistory: [pendingSessionData.startLocation]
        };
        setWorkSession(session);
        setWorkLogs([...workLogs, session]);
        setScreenshot(screenshotData);
        setTimeout(() => setScreenshot(null), 3000);
        setCameraModalOpen(false);
        setPendingSessionData(null);
      }
    };

    const takeBreak = () => {
      if (workSession) {
        const updatedSession = {
          ...workSession,
          breaks: [...workSession.breaks, {
            start: new Date().toISOString(),
            location: location
          }],
          status: 'break'
        };
        setWorkSession(updatedSession);
        updateWorkLog(updatedSession);
      }
    };

    const resumeWork = () => {
      if (workSession && workSession.breaks.length > 0) {
        const lastBreak = workSession.breaks[workSession.breaks.length - 1];
        lastBreak.end = new Date().toISOString();
        
        const updatedSession = {
          ...workSession,
          status: 'working'
        };
        setWorkSession(updatedSession);
        updateWorkLog(updatedSession);
      }
    };

    const endWork = () => {
      if (workSession) {
        const updatedSession = {
          ...workSession,
          endTime: new Date().toISOString(),
          endLocation: location,
          status: 'completed'
        };
        setWorkSession(null);
        updateWorkLog(updatedSession);
      }
    };

    const updateWorkLog = (session) => {
      setWorkLogs(logs => logs.map(log => 
        log.id === session.id ? session : log
      ));
    };

    const takeScreenshot = () => {
      // Simulate screenshot capture
      const screenshotData = {
        id: Date.now(),
        timestamp: new Date().toISOString(),
        location: location,
        type: 'work_progress'
      };

      if (workSession) {
        const updatedSession = {
          ...workSession,
          screenshots: [...workSession.screenshots, screenshotData]
        };
        setWorkSession(updatedSession);
        updateWorkLog(updatedSession);
      }

      setScreenshot(screenshotData);
      setTimeout(() => setScreenshot(null), 3000);
    };

    // Add location history to session and periodic update
    useEffect(() => {
      let intervalId;
      if (workSession && workSession.status === 'working') {
        intervalId = setInterval(() => {
          if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(
              (position) => {
                const newLocation = {
                  latitude: position.coords.latitude,
                  longitude: position.coords.longitude,
                  timestamp: new Date().toISOString()
                };
                setWorkSession(prev => {
                  if (!prev) return prev;
                  const updatedHistory = prev.locationHistory ? [...prev.locationHistory, newLocation] : [newLocation];
                  const updated = { ...prev, locationHistory: updatedHistory };
                  updateWorkLog(updated);
                  return updated;
                });
              }
            );
          }
        }, 10 * 60 * 1000); // 10 minutes
      }
      return () => clearInterval(intervalId);
    }, [workSession]);

    return (
      <div className="min-h-screen bg-gray-100">
        {/* Header */}
        <div className="bg-white shadow-sm border-b">
          <div className="px-4 py-3 flex justify-between items-center">
            <h1 className="text-xl font-bold text-gray-800">Welcome, {currentUser.name}</h1>
            <button
              onClick={() => {
                setCurrentUser(null);
                setCurrentView('login');
                setWorkSession(null);
              }}
              className="text-gray-500 hover:text-gray-700"
            >
              <LogOut size={20} />
            </button>
          </div>
        </div>

        <div className="p-4 space-y-4">
          {/* Status Card */}
          <div className="bg-white rounded-lg shadow p-4">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-semibold">Work Status</h2>
              <div className={`px-3 py-1 rounded-full text-sm font-medium ${
                workSession ? 
                  workSession.status === 'working' ? 'bg-green-100 text-green-800' :
                  workSession.status === 'break' ? 'bg-yellow-100 text-yellow-800' : 
                  'bg-gray-100 text-gray-800'
                : 'bg-gray-100 text-gray-800'
              }`}>
                {workSession ? 
                  workSession.status === 'working' ? 'Working' :
                  workSession.status === 'break' ? 'On Break' : 'Idle'
                : 'Not Started'}
              </div>
            </div>

            {workSession && (
              <div className="space-y-2 text-sm text-gray-600">
                <p><span className="font-medium">Started:</span> {new Date(workSession.startTime).toLocaleString()}</p>
                <p><span className="font-medium">Vehicle:</span> {workSession.vehicle?.name}</p>
                <p><span className="font-medium">Gas:</span> {workSession.gasAmount} L</p>
                <p><span className="font-medium">Screenshots:</span> {workSession.screenshots.length}</p>
                <p><span className="font-medium">Breaks:</span> {workSession.breaks.length}</p>
              </div>
            )}
          </div>

          {/* Location Card */}
          <div className="bg-white rounded-lg shadow p-4">
            <div className="flex items-center mb-2">
              <MapPin className="text-orange-500 mr-2" size={20} />
              <h3 className="font-semibold">Current Location</h3>
            </div>
            {location ? (
              location.error ? (
                <p className="text-red-500 text-sm">{location.error}</p>
              ) : (
                <p className="text-sm text-gray-600">
                  {location.latitude?.toFixed(6)}, {location.longitude?.toFixed(6)}
                </p>
              )
            ) : (
              <p className="text-gray-500 text-sm">Getting location...</p>
            )}
          </div>

          {/* Action Buttons */}
          <div className="space-y-3">
            {!workSession ? (
              <button
                onClick={startWork}
                className="w-full bg-green-500 text-white py-4 px-6 rounded-lg flex items-center justify-center space-x-2 hover:bg-green-600 transition duration-200"
              >
                <Play size={20} />
                <span className="font-semibold">Start Work</span>
              </button>
            ) : (
              <>
                {workSession.status === 'working' ? (
                  <button
                    onClick={takeBreak}
                    className="w-full bg-yellow-500 text-white py-4 px-6 rounded-lg flex items-center justify-center space-x-2 hover:bg-yellow-600 transition duration-200"
                  >
                    <Pause size={20} />
                    <span className="font-semibold">Take Break</span>
                  </button>
                ) : (
                  <button
                    onClick={resumeWork}
                    className="w-full bg-blue-500 text-white py-4 px-6 rounded-lg flex items-center justify-center space-x-2 hover:bg-blue-600 transition duration-200"
                  >
                    <Play size={20} />
                    <span className="font-semibold">Resume Work</span>
                  </button>
                )}

                <button
                  onClick={takeScreenshot}
                  className="w-full bg-purple-500 text-white py-4 px-6 rounded-lg flex items-center justify-center space-x-2 hover:bg-purple-600 transition duration-200"
                >
                  <Camera size={20} />
                  <span className="font-semibold">Take Screenshot</span>
                </button>

                <button
                  onClick={endWork}
                  className="w-full bg-red-500 text-white py-4 px-6 rounded-lg flex items-center justify-center space-x-2 hover:bg-red-600 transition duration-200"
                >
                  <Square size={20} />
                  <span className="font-semibold">End Work</span>
                </button>
              </>
            )}
          </div>
        </div>

        {/* Vehicle Selection Modal */}
        {showVehicleModal && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md">
              <h3 className="text-lg font-semibold mb-4">Select Vehicle & Gas</h3>
              
              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Vehicle</label>
                  <select
                    value={selectedVehicle}
                    onChange={(e) => setSelectedVehicle(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                    required
                  >
                    <option value="">Select a vehicle</option>
                    {vehicles.map(vehicle => (
                      <option key={vehicle.id} value={vehicle.id}>
                        {vehicle.name} ({vehicle.plate})
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">Gas Amount (Liters)</label>
                  <input
                    type="number"
                    value={gasAmount}
                    onChange={(e) => setGasAmount(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-orange-500"
                    placeholder="Enter gas amount"
                    min="0"
                    step="0.1"
                  />
                </div>

                <div className="flex space-x-3">
                  <button
                    onClick={() => setShowVehicleModal(false)}
                    className="flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition duration-200"
                  >
                    Cancel
                  </button>
                  <button
                    onClick={() => {
                      if (selectedVehicle) {
                        setShowVehicleModal(false);
                        startWork();
                      }
                    }}
                    className="flex-1 bg-orange-500 text-white py-2 px-4 rounded-md hover:bg-orange-600 transition duration-200"
                  >
                    Start Work
                  </button>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Camera Modal for Start Work */}
        {cameraModalOpen && (
          <div className="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md flex flex-col items-center">
              <h3 className="text-lg font-semibold mb-4">Take a Photo to Start Work</h3>
              <video ref={videoRef} autoPlay playsInline className="w-full max-h-64 rounded mb-4 border" />
              <canvas ref={canvasRef} style={{ display: 'none' }} />
              <button
                onClick={handleCapturePhoto}
                className="w-full bg-orange-500 text-white py-2 px-4 rounded-md hover:bg-orange-600 transition duration-200 font-semibold mt-2"
              >
                Capture Photo
              </button>
              <button
                onClick={() => { setCameraModalOpen(false); setPendingSessionData(null); }}
                className="w-full bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400 transition duration-200 font-semibold mt-2"
              >
                Cancel
              </button>
            </div>
          </div>
        )}

        {/* Screenshot Notification */}
        {screenshot && (
          <div className="fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-lg shadow-lg z-50">
            <div className="flex items-center space-x-2">
              <Camera size={16} />
              <span>Screenshot captured!</span>
            </div>
          </div>
        )}
      </div>
    );
  };

  // Admin Dashboard Component
  const AdminDashboard = () => {
    const calculateWorkHours = (log) => {
      if (!log.startTime || !log.endTime) return 0;
      
      const start = new Date(log.startTime);
      const end = new Date(log.endTime);
      const totalMs = end - start;
      
      // Subtract break time
      const breakMs = log.breaks.reduce((total, breakItem) => {
        if (breakItem.start && breakItem.end) {
          const breakStart = new Date(breakItem.start);
          const breakEnd = new Date(breakItem.end);
          return total + (breakEnd - breakStart);
        }
        return total;
      }, 0);
      
      return Math.max(0, (totalMs - breakMs) / (1000 * 60 * 60)); // Convert to hours
    };

    const getTotalHoursThisMonth = (employeeId) => {
      const now = new Date();
      const currentMonth = now.getMonth();
      const currentYear = now.getFullYear();
      
      return workLogs
        .filter(log => {
          const logDate = new Date(log.startTime);
          return log.employeeId === employeeId && 
                 logDate.getMonth() === currentMonth && 
                 logDate.getFullYear() === currentYear &&
                 log.status === 'completed';
        })
        .reduce((total, log) => total + calculateWorkHours(log), 0);
    };

    const FuelPanel = () => (
      <div className="bg-white rounded-lg shadow p-6 mb-6">
        <h3 className="text-lg font-semibold mb-4">Fuel Panel (Liters)</h3>
        <div className="overflow-x-auto">
          <table className="w-full text-sm">
            <thead>
              <tr className="border-b">
                <th className="text-left py-2">Employee</th>
                <th className="text-left py-2">Current Fuel</th>
                <th className="text-left py-2">Status</th>
              </tr>
            </thead>
            <tbody>
              {employees.map(employee => {
                const activeSession = workLogs.find(log => log.employeeId === employee.id && (log.status === 'working' || log.status === 'break'));
                return (
                  <tr key={employee.id} className="border-b">
                    <td className="py-2 font-medium">{employee.name}</td>
                    <td className="py-2">{activeSession ? activeSession.gasAmount : '-'}</td>
                    <td className="py-2">{activeSession ? activeSession.status : 'Not Working'}</td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
    );

    const OverviewTab = () => (
      <div className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Active Workers</p>
                <p className="text-2xl font-bold text-gray-900">
                  {workLogs.filter(log => log.status === 'working' || log.status === 'break').length}
                </p>
              </div>
              <Users className="text-orange-500" size={24} />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Hours Today</p>
                <p className="text-2xl font-bold text-gray-900">
                  {workLogs
                    .filter(log => {
                      const today = new Date().toDateString();
                      return new Date(log.startTime).toDateString() === today;
                    })
                    .reduce((total, log) => total + calculateWorkHours(log), 0)
                    .toFixed(1)}
                </p>
              </div>
              <Clock className="text-orange-500" size={24} />
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Completed Jobs</p>
                <p className="text-2xl font-bold text-gray-900">
                  {workLogs.filter(log => log.status === 'completed').length}
                </p>
              </div>
              <BarChart3 className="text-orange-500" size={24} />
            </div>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow">
          <div className="px-6 py-4 border-b">
            <h3 className="text-lg font-semibold">Recent Activity</h3>
          </div>
          <div className="divide-y">
            {workLogs.slice(-5).reverse().map((log, index) => (
              <div key={index} className="px-6 py-4">
                <div className="flex items-center justify-between">
                  <div>
                    <p className="font-medium">{log.employeeName}</p>
                    <p className="text-sm text-gray-600">
                      {log.status === 'completed' ? 'Completed work' : 
                       log.status === 'working' ? 'Started work' : 'On break'}
                    </p>
                  </div>
                  <div className="text-right">
                    <p className="text-sm text-gray-600">
                      {new Date(log.startTime).toLocaleString()}
                    </p>
                    {log.status === 'completed' && (
                      <p className="text-sm font-medium text-green-600">
                        {calculateWorkHours(log).toFixed(1)}h
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    );

    const EmployeesTab = () => (
      <div className="space-y-4">
        {employees.map(employee => (
          <div key={employee.id} className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center justify-between mb-4">
              <div>
                <h3 className="text-lg font-semibold">{employee.name}</h3>
                <p className="text-gray-600">{employee.email}</p>
              </div>
              <div className="text-right">
                <p className="text-sm text-gray-600">This Month</p>
                <p className="text-2xl font-bold text-orange-500">
                  {getTotalHoursThisMonth(employee.id).toFixed(1)}h
                </p>
              </div>
            </div>
            <div className="space-y-2">
              {workLogs
                .filter(log => log.employeeId === employee.id)
                .slice(-3)
                .map((log, index) => (
                  <div key={index} className="flex flex-col md:flex-row md:items-center md:justify-between text-sm border-b py-2">
                    <div className="flex-1">
                      <span>{new Date(log.startTime).toLocaleDateString()}</span>
                      <span className={`ml-2 px-2 py-1 rounded-full text-xs ${
                        log.status === 'completed' ? 'bg-green-100 text-green-800' :
                        log.status === 'working' ? 'bg-blue-100 text-blue-800' :
                        'bg-yellow-100 text-yellow-800'
                      }`}>
                        {log.status === 'completed' ? `${